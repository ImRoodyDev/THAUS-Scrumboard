//////package com.example.chatbox;
//////// Libraries die geimporteerd
//////
//////import javax.swing.*;
//////import java.awt.*;
//////import java.awt.event.ActionEvent;
//////import java.awt.event.ActionListener;
//////
//////public class ChatBox extend JFrame {
//////    public ChatBox() {
//////        setTitle("TeamFlow");
//////        setSize(500, 500);
//////        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//////        setLayout(null);
//////    }
//////
//////  // JText Area for the Chat Area
//////    JTextArea chatArea = new JTextArea();
//////    chatArea.setBounds(10, 10 , 350, 300);
//////    chatArea.setEditable(false); // Voorkomt dat de gebruiker berichten kan aanpassen
//////    JScrollPane scrollPane = new JScrollPane(chatArea); // Maak scrollen mogelijk
//////    scrollPane.setBounds(10, 10, 350, 300);
//////    add(scrollPane);
//////
//////    JTextField inputField =  new JTextField();
//////    inputField.setBounds(10, 320, 250, 30);
//////    add(inputField);
//////
//////    JButton sendButton = new JButton = new JButton("Verzenden");
//////    sendButton.setBounds(270, 320, 100, 30);
//////    add(sendButton);
//////
//////
//////    sendButton.addActionListener(new ActionListener() {
//////        public void actionPerformed (ActionEvent e){
//////
//////            String bericht = inputField.getText();
//////            if (!bericht.isEmpty()) {
//////
//////                chatArea.append("Jouw" + bericht + "\n");
//////                inputField.setText(""); // Text vak leegmaken
//////            }
//////        }
//////    });
//////
//////    inputField.addActionListener(new ActionListener() {
//////        public void actionPerformed(ActionEvent e){
//////
//////            sendButton.doClick(); // Actuator voor de knop
//////        }
//////    });
//////
//////    JLabel chatPartnerLabel = new JLabel ("U spreekt met :  Niemand");
//////    chatPartnerLabel.setBounds(10, 360, 200, 30);
//////    add(chatPartnerLabel);
//////    chatListModel.addElement("Gebruiker1");
//////    chatListModel.addElement("Gebruiker2");
//////    chatListModel.addElement("Gebriker3");
//////
//////    chatList.addMouseListener(new java.awt.event.MouseAdapter()
//////
//////    {
//////        public void mouseClicked (java.awt.event.MouseEvent evt){
//////        String geselecteerdeGebruiker = chatList.getSelectedValue();
//////        if (geselecteerdeGebruiker != null) {
//////            chatPartnerLabel.setText("U spreekt met : " + geselecteerdeGebruiker);
//////            chatArea.setText("");
//////        }
//////    }
//////    });
//////
//////    public static void main(String[] args) {
//////        SwingUtilities.invokeLater(() -> {
//////            new ChatBox().setVisible(true);
//////        });
//////    }
//////}
//////
//////
//////
//////
//////    public static void main(String [] args) {
//////        new ChatBox().setVisible(true);
//////    }
//////
//////
//////
//////
//////
//////
//////}
//////module com.example.chatbox {
//////    requires java.desktop;
//////}
////
////import javax.swing.*;
////import java.awt.event.ActionEvent;
////import java.awt.event.ActionListener;
////
////// Begin van de klasse die de JFrame uitbreidt
////public class ChatBox extends JFrame { // Correcte declaratie: "extends JFrame"
////    // Globale variabelen die door de hele klasse gebruikt worden
////    private JTextArea chatArea; // Om berichten weer te geven
////    private JTextField inputField; // Om berichten in te voeren
////    private JLabel chatPartnerLabel; // Om de actieve gesprekspartner weer te geven
////    private DefaultListModel<String> chatListModel; // Voor de lijst van gesprekspartners
////    private JList<String> chatList; // De zijbalk voor gesprekken
////
////    public ChatBox() { // Constructor voor het instellen van de GUI
////        setTitle("TeamFlow"); // Stel de titel van het venster in
////        setSize(500, 500); // Stel de grootte van het venster in
////        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Sluit de applicatie bij het sluiten van het venster
////        setLayout(null); // Gebruik een absolute layout
////
////        // JTextArea voor de chatbox
////        chatArea = new JTextArea(); // Maak een nieuw tekstgebied
////        chatArea.setBounds(10, 10, 350, 300); // Stel de positie en grootte in
////        chatArea.setEditable(false); // Voorkom dat gebruikers berichten in de chatbox bewerken
////        JScrollPane scrollPane = new JScrollPane(chatArea); // Voeg scrollfunctionaliteit toe
////        scrollPane.setBounds(10, 10, 350, 300); // Stel de positie en grootte van de scrollpaneel in
////        add(scrollPane); // Voeg de scrollpaneel toe aan het hoofdframe
////
////        // JTextField voor gebruikersinput
////        inputField = new JTextField(); // Maak een invoerveld
////        inputField.setBounds(10, 320, 250, 30); // Stel de positie en grootte in
////        add(inputField); // Voeg het invoerveld toe aan het hoofdframe
////
////        // JButton voor het verzenden van berichten
////        JButton sendButton = new JButton("Verzenden"); // Maak een knop
////        sendButton.setBounds(270, 320, 100, 30); // Stel de positie en grootte van de knop in
////        add(sendButton); // Voeg de knop toe aan het hoofdframe
////
////        // Functionaliteit voor de verzendknop
////        sendButton.addActionListener(new ActionListener() {
////            public void actionPerformed(ActionEvent e) { // Methode die de knopactie behandelt
////                String bericht = inputField.getText(); // Haal het ingevoerde bericht op
////                if (!bericht.isEmpty()) { // Controleer of het invoerveld niet leeg is
////                    chatArea.append("Jij: " + bericht + "\n"); // Voeg het bericht toe aan de chatbox
////                    inputField.setText(""); // Maak het invoerveld leeg na verzenden
////                }
////            }
////        });
////
////        // Functionaliteit voor Enter-toets
////        inputField.addActionListener(new ActionListener() {
////            public void actionPerformed(ActionEvent e) { // Methode die op de Enter-toets reageert
////                sendButton.doClick(); // Activeer de verzendknop
////            }
////        });
////
////        // JLabel voor gesprekspartner
////        chatPartnerLabel = new JLabel("U spreekt met: Niemand"); // Label om de gesprekspartner weer te geven
////        chatPartnerLabel.setBounds(10, 360, 200, 30); // Stel positie en grootte in
////        add(chatPartnerLabel); // Voeg het label toe aan het hoofdframe
////
////        // Gesprekslijst en zijbalk
////        chatListModel = new DefaultListModel<>(); // Maak een model voor de gesprekspartnerslijst
////        chatList = new JList<>(chatListModel); // Maak een lijst met het model
////        chatList.setBounds(370, 10, 100, 340); // Stel positie en grootte in
////        add(chatList); // Voeg de lijst toe aan het hoofdframe
////
////        // Voeg testgegevens toe aan de gesprekslijst
////        chatListModel.addElement("Gebruiker1");
////        chatListModel.addElement("Gebruiker2");
////        chatListModel.addElement("Gebruiker3");
////
////        // Functionaliteit voor het selecteren van een gesprekspartner
////        chatList.addMouseListener(new java.awt.event.MouseAdapter() {
////            public void mouseClicked(java.awt.event.MouseEvent evt) { // Methode voor klikken op een gesprekspartner
////                String geselecteerdeGebruiker = chatList.getSelectedValue(); // Haal de geselecteerde gebruiker op
////                if (geselecteerdeGebruiker != null) { // Controleer of een gesprekspartner geselecteerd is
////                    chatPartnerLabel.setText("U spreekt met: " + geselecteerdeGebruiker); // Update het label
////                    chatArea.setText(""); // Leeg de chatbox voor een nieuw gesprek
////                }
////            }
////        });
////    }
////
////    public static void main(String[] args) { // Main-methode om het programma te starten
////        SwingUtilities.invokeLater(() -> { // Start de applicatie in de Event Dispatch Thread
////            new ChatBox().setVisible(true); // Maak het frame zichtbaar
////        });
////    }
////}
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
////import javax.swing.*;
////import java.awt.event.ActionEvent;
////import java.awt.event.ActionListener;
////import java.awt.event.MouseAdapter;
////import java.awt.event.MouseEvent;
////import java.util.HashMap;
////
////public class ChatBox extends JFrame {
////    private JTextArea chatArea; // Chatbox om berichten weer te geven
////    private JTextField inputField; // Invoerveld voor berichten
////    private JLabel chatPartnerLabel; // Label om de gesprekspartner weer te geven
////    private DefaultListModel<String> chatListModel; // Model voor de lijst met gebruikers
////    private JList<String> chatList; // Lijst van gesprekspartners
////    private HashMap<String, StringBuilder> chatHistory; // Opslag voor gesprekken per gebruiker
////
////    public ChatBox() {
////        setTitle("TeamFlow");
////        setSize(500, 500);
////        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
////        setLayout(null);
////
////        chatHistory = new HashMap<>(); // Initialiseer opslag voor gesprekken
////
////        // Chatbox (JTextArea) met scrollpaneel
////        chatArea = new JTextArea();
////        chatArea.setEditable(false);
////        JScrollPane scrollPane = new JScrollPane(chatArea);
////        scrollPane.setBounds(10, 10, 350, 300);
////        add(scrollPane);
////
////        // Invoerveld voor berichten
////        inputField = new JTextField();
////        inputField.setBounds(10, 320, 250, 30);
////        add(inputField);
////
////        // Verzenden-knop
////        JButton sendButton = new JButton("Verzenden");
////        sendButton.setBounds(270, 320, 100, 30);
////        add(sendButton);
////
////        // Verzenden-knop functionaliteit
////        sendButton.addActionListener(new ActionListener() {
////            public void actionPerformed(ActionEvent e) {
////                String bericht = inputField.getText();
////                String gesprekspartner = chatList.getSelectedValue();
////
////                if (!bericht.isEmpty() && gesprekspartner != null) {
////                    chatHistory.putIfAbsent(gesprekspartner, new StringBuilder());
////                    chatHistory.get(gesprekspartner).append("Jij: ").append(bericht).append("\n");
////
////                    chatArea.append("Jij: " + bericht + "\n");
////                    inputField.setText("");
////                }
////            }
////        });
////
////        // Enter-toets activeert verzenden-knop
////        inputField.addActionListener(e -> sendButton.doClick());
////
////        // Label voor gesprekspartner
////        chatPartnerLabel = new JLabel("U spreekt met: Niemand");
////        chatPartnerLabel.setBounds(10, 360, 200, 30);
////        add(chatPartnerLabel);
////
////        // Lijst met gesprekspartners
////        chatListModel = new DefaultListModel<>();
////        chatList = new JList<>(chatListModel);
////        chatList.setBounds(370, 10, 100, 340);
////        add(chatList);
////
////        // Voeg testgebruikers toe
////        chatListModel.addElement("Gebruiker1");
////        chatListModel.addElement("Gebruiker2");
////        chatListModel.addElement("Gebruiker3");
////
////        // Functionaliteit voor wisselen van gesprek
////        chatList.addMouseListener(new MouseAdapter() {
////            public void mouseClicked(MouseEvent evt) {
////                String geselecteerdeGebruiker = chatList.getSelectedValue();
////                if (geselecteerdeGebruiker != null) {
////                    chatPartnerLabel.setText("U spreekt met: " + geselecteerdeGebruiker);
////                    chatArea.setText(chatHistory.getOrDefault(geselecteerdeGebruiker, new StringBuilder()).toString());
////                }
////            }
////        });
////    }
////
////    public static void main(String[] args) {
////        SwingUtilities.invokeLater(() -> new ChatBox().setVisible(true));
////    }
////}
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//import javax.swing.*;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
//import java.awt.event.MouseAdapter;
//import java.awt.event.MouseEvent;
//import java.io.*;
//import java.util.HashMap;
//
//public class ChatBox extends JFrame {
//    private JTextArea chatArea;
//    private JTextField inputField;
//    private JLabel chatPartnerLabel;
//    private DefaultListModel<String> chatListModel;
//    private JList<String> chatList;
//    private HashMap<String, StringBuilder> chatHistory;
//    private static final String FILE_NAME = "chats.txt";
//
//    public ChatBox() {
//        setTitle("TeamFlow Chat");
//        setSize(500, 500);
//        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        setLayout(null);
//
//        chatHistory = new HashMap<>();
//        loadChatHistory(); // Laad eerder opgeslagen gesprekken
//
//        chatArea = new JTextArea();
//        chatArea.setEditable(false);
//        JScrollPane scrollPane = new JScrollPane(chatArea);
//        scrollPane.setBounds(10, 10, 350, 300);
//        add(scrollPane);
//
//        inputField = new JTextField();
//        inputField.setBounds(10, 320, 250, 30);
//        add(inputField);
//
//        JButton sendButton = new JButton("Verzenden");
//        sendButton.setBounds(270, 320, 100, 30);
//        add(sendButton);
//
//        sendButton.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                String bericht = inputField.getText();
//                String gesprekspartner = chatList.getSelectedValue();
//
//                if (!bericht.isEmpty() && gesprekspartner != null) {
//                    chatHistory.putIfAbsent(gesprekspartner, new StringBuilder());
//                    chatHistory.get(gesprekspartner).append("Jij: ").append(bericht).append("\n");
//                    chatArea.append("Jij: " + bericht + "\n");
//                    inputField.setText("");
//
//                    saveChatHistory(); // Opslaan in bestand
//                }
//            }
//        });
//
//        inputField.addActionListener(e -> sendButton.doClick());
//
//        chatPartnerLabel = new JLabel("U spreekt met: Niemand");
//        chatPartnerLabel.setBounds(10, 360, 200, 30);
//        add(chatPartnerLabel);
//
//        chatListModel = new DefaultListModel<>();
//        chatList = new JList<>(chatListModel);
//        chatList.setBounds(370, 10, 100, 340);
//        add(chatList);
//
//        chatList.addMouseListener(new MouseAdapter() {
//            public void mouseClicked(MouseEvent evt) {
//                String geselecteerdeGebruiker = chatList.getSelectedValue();
//                if (geselecteerdeGebruiker != null) {
//                    chatPartnerLabel.setText("U spreekt met: " + geselecteerdeGebruiker);
//                    chatArea.setText(chatHistory.getOrDefault(geselecteerdeGebruiker, new StringBuilder()).toString());
//                }
//            }
//        });
//
//        JTextField newUserField = new JTextField();
//        newUserField.setBounds(370, 360, 100, 30);
//        add(newUserField);
//
//        JButton addUserButton = new JButton("Toevoegen");
//        addUserButton.setBounds(370, 400, 100, 30);
//        add(addUserButton);
//
//        addUserButton.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                String nieuweGebruiker = newUserField.getText().trim();
//                if (!nieuweGebruiker.isEmpty() && !chatListModel.contains(nieuweGebruiker)) {
//                    chatListModel.addElement(nieuweGebruiker);
//                    chatHistory.put(nieuweGebruiker, new StringBuilder());
//                    newUserField.setText("");
//
//                    saveChatHistory(); // Opslaan in bestand
//                }
//            }
//        });
//    }
//
//    private void saveChatHistory() {
//        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
//            for (String gebruiker : chatHistory.keySet()) {
//                writer.write("===" + gebruiker + "===\n");
//                writer.write(chatHistory.get(gebruiker).toString());
//                writer.write("\n");
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//
//    private void loadChatHistory() {
//        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
//            String line;
//            String huidigeGebruiker = null;
//            StringBuilder gesprekken = new StringBuilder();
//
//            while ((line = reader.readLine()) != null) {
//                if (line.startsWith("===") && line.endsWith("===")) {
//                    if (huidigeGebruiker != null) {
//                        chatHistory.put(huidigeGebruiker, new StringBuilder(gesprekken));
//                    }
//                    huidigeGebruiker = line.substring(3, line.length() - 3);
//                    chatListModel.addElement(huidigeGebruiker);
//                    gesprekken = new StringBuilder();
//                } else {
//                    gesprekken.append(line).append("\n");
//                }
//            }
//            if (huidigeGebruiker != null) {
//                chatHistory.put(huidigeGebruiker, gesprekken);
//            }
//        } catch (IOException e) {
//            System.out.println("Geen eerdere gesprekken gevonden, nieuw bestand wordt aangemaakt.");
//        }
//    }
//
//    public static void main(String[] args) {
//        SwingUtilities.invokeLater(() -> new ChatBox().setVisible(true));
//    }
//}
//




















































import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.util.HashMap;

public class ChatBox extends JFrame {
    private JTextArea chatArea;
    private JTextField inputField;
    private JLabel chatPartnerLabel;
    private DefaultListModel<String> chatListModel;
    private JList<String> chatList;
    private HashMap<String, StringBuilder> chatHistory;
    private static final String FILE_NAME = "chats.txt";

    public ChatBox() {
        setTitle("TeamFlow Chat");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(null);

        chatHistory = new HashMap<>();

        // Chatbox (JTextArea) met scrollpaneel
        chatArea = new JTextArea();
        chatArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(chatArea);
        scrollPane.setBounds(10, 10, 350, 300);
        add(scrollPane);

        // Invoerveld voor berichten
        inputField = new JTextField();
        inputField.setBounds(10, 320, 250, 30);
        add(inputField);

        JButton sendButton = new JButton("Verzenden");
        sendButton.setBounds(270, 320, 100, 30);
        add(sendButton);

        sendButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String bericht = inputField.getText();
                String gesprekspartner = chatList.getSelectedValue();

                if (!bericht.isEmpty() && gesprekspartner != null) {
                    chatHistory.putIfAbsent(gesprekspartner, new StringBuilder());
                    chatHistory.get(gesprekspartner).append("Jij: ").append(bericht).append("\n");
                    chatArea.append("Jij: " + bericht + "\n");
                    inputField.setText("");

                    saveChatHistory();
                }
            }
        });

        inputField.addActionListener(e -> sendButton.doClick());

        chatPartnerLabel = new JLabel("U spreekt met: Niemand");
        chatPartnerLabel.setBounds(10, 360, 200, 30);
        add(chatPartnerLabel);

        // ❗ FIXED: Initialize chatListModel BEFORE loading history
        chatListModel = new DefaultListModel<>();
        chatList = new JList<>(chatListModel);
        chatList.setBounds(370, 10, 100, 340);
        add(chatList);

        // Load saved chat history
        loadChatHistory();

        chatList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                String geselecteerdeGebruiker = chatList.getSelectedValue();
                if (geselecteerdeGebruiker != null) {
                    chatPartnerLabel.setText("U spreekt met: " + geselecteerdeGebruiker);
                    chatArea.setText(chatHistory.getOrDefault(geselecteerdeGebruiker, new StringBuilder()).toString());
                }
            }
        });

        JTextField newUserField = new JTextField();
        newUserField.setBounds(370, 360, 100, 30);
        add(newUserField);

        JButton addUserButton = new JButton("Toevoegen");
        addUserButton.setBounds(370, 400, 100, 30);
        add(addUserButton);

        addUserButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String nieuweGebruiker = newUserField.getText().trim();
                if (!nieuweGebruiker.isEmpty() && !chatListModel.contains(nieuweGebruiker)) {
                    chatListModel.addElement(nieuweGebruiker);
                    chatHistory.put(nieuweGebruiker, new StringBuilder());
                    newUserField.setText("");

                    saveChatHistory();
                }
            }
        });
    }

    private void saveChatHistory() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (String gebruiker : chatHistory.keySet()) {
                writer.write("===" + gebruiker + "===\n");
                writer.write(chatHistory.get(gebruiker).toString());
                writer.write("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadChatHistory() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            String huidigeGebruiker = null;
            StringBuilder gesprekken = new StringBuilder();

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("===") && line.endsWith("===")) {
                    if (huidigeGebruiker != null) {
                        chatHistory.put(huidigeGebruiker, new StringBuilder(gesprekken));
                    }
                    huidigeGebruiker = line.substring(3, line.length() - 3);
                    chatListModel.addElement(huidigeGebruiker); // ✅ Fix: chatListModel is now initialized
                    gesprekken = new StringBuilder();
                } else {
                    gesprekken.append(line).append("\n");
                }
            }
            if (huidigeGebruiker != null) {
                chatHistory.put(huidigeGebruiker, gesprekken);
            }
        } catch (IOException e) {
            System.out.println("Geen eerdere gesprekken gevonden, nieuw bestand wordt aangemaakt.");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new ChatBox().setVisible(true));
    }
}
